"""

                                    ‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó
                                    ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù
                                    ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë
                                    ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë
                                    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
                                    ‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë
"""


"""
√öLOHA: Stupidn√≠ K√°men, N≈Ø≈æky, Pap√≠r
    - podm√≠nky, while cyklus
- - - - - - - - - - - - - - - - -

Udƒõlejte program, kter√Ω s u≈æivatelem do nekoneƒçna bude hr√°t hru k√°men, n≈Ø≈æky, pap√≠r.
U≈æivatel v≈ædy zad√°v√° jako prvn√≠ a poƒç√≠taƒç ho V≈ΩDY poraz√≠. Pokud tedy u≈æivatel zad√° nap≈ô. "pap√≠r", poƒç√≠taƒç odpov√≠ "n≈Ø≈æky".
Po ka≈æd√©m kole vypi≈°te aktu√°ln√≠ sk√≥re. (u≈æivatel by mƒõl m√≠t 0 bod≈Ø, poƒç√≠taƒç by ho mƒõl v≈ædy porazit)

N√ÅPOVƒöDA: Aby program bƒõ≈æel do nekoneƒçna, vyu≈æijte nekoneƒçn√Ω cyklus.

"""

while True: # nekoneƒçn√Ω cyklus
    # sem pi≈°te sv≈Øj k√≥d
    pass


"""
√öLOHA: MAIL CHECKER
    - pr√°ce se stringem, podm√≠nky
- - - - - - - - - - - - - - - - -

Vytvo≈ôte jednoduch√Ω program, kter√Ω zkontroluje platnost e-mailov√© adresy.
ZEPTEJTE se u≈æivatele na e-mail a n√°slednƒõ zkontrolujte:
    1) Adresa mus√≠ obsahovat @ (zavin√°ƒç)
    2) Adresa mus√≠ obsahovat . (teƒçku)
    3) Adresa mus√≠ konƒçit na "com" nebo "cz"

Pokud jsou v≈°echny podm√≠nky splnƒõn√©, ≈ôeknƒõte u≈æivateli OK, pokud ne tak staƒç√≠, kdy≈æ ≈ôeknete, ≈æe adresa je neplatn√°.
Nemus√≠te vypisovat proƒç.

N√ÅPOVƒöDA: Pou≈æijte funkce count a endswith, ƒçi jin√© vlastnosti stringu.
"""



"""
√öKOL: P≈ôekladaƒç do emoji
    - funkce, podm√≠nky
- - - - - - - - - - - - - - - - -

Va≈°√≠m √∫kolem je udƒõlat funkci, kter√° p≈ôij√≠m√° n√°sleduj√≠c√≠ parametr:
    - ≈°tƒõst√≠ (ƒç√≠slo od 1 do 5), kde 5 = hodnƒõ velk√Ω smutek, 1 = extr√©mnƒõ ≈°≈•asn√Ω ƒçlovƒõk
    - klaun (boolean)

Funkce vr√°t√≠ emoji, kter√° nejl√©pe vystihuje n√°ladu ƒçlovƒõka. M≈Ø≈æete si vybrat vlastn√≠ emoji.
Pokud je ale parametr "klaun" nastaven na True, pak funkce v≈ædy vr√°t√≠ emoji klauna, proto≈æe ten mus√≠ b√Ωt v≈ædy ≈°≈•astn√Ω.

Emoji pro inspiraci: üòÄüòÑüòûüò≠ü§°üòÇü§£

"""

# ZDE UDƒöLEJTE VA≈†I FUNKCI




"""
√öLOHA: FIZZ BUZZ
    - for cyklus, podm√≠nky
- - - - - - - - - - - - - - - - -

FizzBuzz je program√°torsk√° klasika.
Udƒõlejte program, kter√Ω vyp√≠≈°e v≈°echna ƒç√≠sla od 1 do 100, ALE:
  - m√≠sto ƒç√≠sel, kter√° jsou dƒõliteln√° 3 vyp√≠≈°e Fizz
  - m√≠sto ƒç√≠sel, kter√° jsou dƒõliteln√° 5 vyp√≠≈°e Buzz
  - m√≠sto ƒç√≠sel, kter√° jsou dƒõliteln√° 3 i 5 vyp√≠≈°e FizzBuzz

Tedy nap≈ô. prvn√≠ch 15 ≈ô√°dk≈Ø bude:
            1
            2
            Fizz
            4
            Buzz
            Fizz
            7
            8
            Fizz
            Buzz
            11
            Fizz
            13
            14
            FizzBuzz
"""



"""
√öLOHA: SMƒöN√ÅRNA
    - slovn√≠k, while cyklus
- - - - - - - - - - - - - - - - -

M√°te zadan√Ω slovn√≠k mƒõnov√Ωch kurz≈Ø. KL√çƒå ve slovn√≠ku je v≈ædy zkratka nƒõjak√© mƒõny (nap≈ô. CZK pro na≈°√≠ korunu),
HODNOTA pak vyjad≈ôuje kolik dolar≈Ø dostaneme za jednu jednotku. Nap≈ô. za jednu CZK dostaneme 0.04 dolar≈Ø. To znamen√°,
≈æe jeden dolar = 25 korun ƒçesk√Ωch. 


√ökol 1:
    Va≈°√≠m √∫kolem je vytvo≈ôit program, kter√Ω se zept√° u≈æivatele na:
        1) Zkratku mƒõny, ve kter√© m√° pen√≠ze
        2) Mno≈æstv√≠ penƒõz
    N√°slednƒõ program vyp√≠≈°e, kolik dolar≈Ø za tento obnos u≈æivatel dostane.
    Nap≈ô. u≈æivatel zad√° NZD a 10, program vyp√≠≈°e "7.2 dolaru". 

√ökol 2:
    Pokud u≈æ m√°te hotov√Ω 1. √∫kol, dodƒõlejte do programu funkcionalitu P≈òID√ÅN√ç MƒöNY. Program tedy pobƒõ≈æ√≠ v nƒõjak√©m cyklu
    a opakovanƒõ se u≈æivatele pt√°, jestli chce p≈ôev√©st mƒõnu (to u≈æ byste mƒõli m√≠t hotov√© z √∫kolu 1), nebo p≈ôidat novou.
    Pokud chce u≈æivatel p≈ôidat novou mƒõnu, staƒç√≠ mu zadat SYMBOL a KURZ.


"""

# slovn√≠k kurz≈Ø, nijak ho neupravujte, ale pou≈æijte ho ve sv√©m programu
dolar_kurz = {
    "CZK": 0.04,  # 1 CZK = 0.04 USD
    "EUR": 1.2,   # 1 EUR = 1.2 USD
    "GBP": 1.4,   # Britsk√° libra
    "JPY": 0.009, # Japonsk√Ω jen
    "CAD": 0.8,   # Kanadsk√Ω dolar
    "AUD": 0.77,  # Australsk√Ω dolar
    "CHF": 1.1,   # ≈†v√Ωcarsk√Ω frank
    "CNY": 0.16,  # ƒå√≠nsk√Ω j√ºan
    "SEK": 0.12,  # ≈†v√©dsk√° koruna
    "NZD": 0.72,  # Novoz√©landsk√Ω dolar
    "MXN": 0.05   # Mexick√© peso
}




""" 
√öLOHA: ZAD√ÅN√ç HESLA
    - funkce, cyklus
- - - - - - - - - - - - - - - - -

√ökol 1: Udƒõlejte funkci "odpocet", kter√° p≈ôij√≠ma jeden parametr (pocet_sekund). Funkce m√° za √∫kol udƒõlat odpoƒçet
        od pocet_sekund a≈æ do 1. Nap≈ô. pokud u≈æivatel zavol√° odpocet(5), tak funkce vyp√≠≈°e:
            Pros√≠m poƒçkejte je≈°tƒõ 5 sekund.
            Pros√≠m poƒçkejte je≈°tƒõ 4 sekund.
            Pros√≠m poƒçkejte je≈°tƒõ 3 sekund.
            Pros√≠m poƒçkejte je≈°tƒõ 2 sekund.
            Pros√≠m poƒçkejte je≈°tƒõ 1 sekund.
        P≈ôiƒçem≈æ mezi ka≈æd√Ωm v√Ωpisem ubƒõhne p≈ôesnƒõ jedna vte≈ôina.
        
        Inspirujte se k√≥dem n√≠≈æe - dƒõl√° to sam√©, akor√°t to nen√≠ ve funkci.

√ökol 2: Potom co m√°te √∫kol 1, roz≈°i≈ôte program n√°sledovnƒõ:
        1) U≈æivatel si zvol√≠ nƒõjak√© heslo.
        2) Pot√© se poƒç√≠taƒç zaƒçne ve while cyklu opakovanƒõ pt√°t na to heslo, pokud u≈æivatel zad√° spr√°vnƒõ, tak program konƒç√≠.
           Pokud ale u≈æivatel zad√° heslo chybnƒõ, mus√≠ poƒçkat 1 sekundu, ne≈æ bude moct heslo zadat znovu. Poka≈æd√© kdy≈æ 
           zad√° ≈°patn√© heslo, mus√≠ ƒçekat o 2 sekundy d√©le, ne≈æ minule. Program konƒç√≠ a≈æ u≈æivatel zad√° heslo spr√°vnƒõ.
           K ƒåEK√ÅN√ç POU≈ΩIJTE FUNKCI, KTEROU JSTE UDƒöLALI V √öKOLU 1!

"""

from time import sleep

# P≈òEDƒöLEJTE TENTO K√ìD TAK, ABY BYL VE FUNKCI a POƒåET SEKUND SE D√Å NASTAVOVAT PARAMETREM
pocet_sekund = 5
while pocet_sekund > 0:
    print(f"Pros√≠m poƒçkejte je≈°tƒõ {pocet_sekund} sekund.")
    pocet_sekund -= 1 # sn√≠≈æime poƒçet sekund
    sleep(1) # "sp√≠me" jednu sekundu, tedy program se na jednu sekundu zastav√≠, ne≈æ bude pokraƒçovat do dal≈°√≠ho cyklu


"""
√öKOL: Slovn√≠k smajl√≠k≈Ø (emoji)
    - slovn√≠k, while cyklus
- - - - - - - - - - - - - - - - -

Va≈°im √∫kolem je udƒõlat program, kde u≈æivatel m≈Ø≈æe zad√°vat r≈Øzn√© n√°zvy smajl√≠k≈Ø a jako odpovƒõƒè dostane smajl√≠ka, kter√Ω dann√© slovo reprezentuje.
Nap≈ô. u≈æivatel zad√° "radost" a program odpov√≠: üòÑ.

Pokud u≈æivatel zad√° nƒõjak√Ω n√°zev, kter√Ω program nezn√°, tak d√° u≈æivateli mo≈ænost, aby zadal smajl√≠ka, kter√Ω ke slovu pat≈ô√≠ (a program se ho tak "nauƒçil").
Program by mƒõl bƒõ≈æet v nekoneƒçn√©m for cyklu a neust√°le vy≈ôizovat po≈æadavky u≈æivatele.

Fungovat by mƒõl program tak, ≈æe si bude udr≈æovat slovn√≠k smajl√≠k≈Ø, kde kl√≠ƒç bude slovo reprezentuj√≠c√≠ smajl√≠ka (nap≈ô. "klaun") a hodnota bude emoji (ü§°).

N√ÅPOVƒöDA: Inspirujte se uk√°zkovou √∫lohou (ƒåJ => AJ slovn√≠k) v souboru T√©mata/slovnik/slovnik.py
"""

# pro zaƒç√°tek m≈Ø≈æete pou≈æ√≠t tento slovn√≠k
emoce_emoji_slovnik = {"radost": "üòÑ",
                       "klaun": "ü§°",
                       "selfmade businessman": "ü§ë",
                       "l√°ska": "ü•∞",
                       "nevƒõ≈ô√≠c√≠": "ü§®"}

"""
√öKOL: Nejobl√≠benƒõj≈°√≠ produkt
    - cyklus, slovn√≠k
- - - - - - - - - - - - - - - - -

N√≠≈æe m√°te seznam vƒõc√≠, kter√© se prodali v lok√°ln√≠m obchodƒõ. V seznamu se mnoho polo≈æek vyskytuje v√≠cekr√°t, co≈æ znamen√°,
≈æe se jich prodalo v√≠ce kus≈Ø. Va≈°√≠m √∫kolem je zjistit, kter√Ω produkt se prodal nejv√≠cekr√°t.
  
  
N√ÅPOVƒöDA: 1) Nejd≈ô√≠ve si vytvo≈ôte pr√°zdn√Ω slovn√≠k, kter√Ω bude slou≈æit k poƒç√≠t√°n√≠ jednotliv√Ωch polo≈æek.
          2) Postupnƒõ v cyklu (nejl√©pe ve for cyklu) proch√°zejte seznam polo≈æku po polo≈æce. Pokud dannou polo≈æku vid√≠te
             poprv√©, tak ji dejte do slovn√≠ku a nastavte poƒçet na jedna. Pokud u≈æ tam polo≈æka je, zvy≈°te poƒçet o 1.
          3) Nakonec projdƒõte cel√Ω slovn√≠k (hodnotu i kl√≠ƒç) a najdƒõte nejvy≈°≈°√≠ hodnotu (poƒçet prodan√Ωch kus≈Ø) a zapamatujte
             si kl√≠ƒç (polo≈æka). Pokud nev√≠te jak na to, zeptejte se + uk√°zky jak proch√°zet slovn√≠k najdete v lekci na slovn√≠k.
          
          Kouknƒõte se na uk√°zky n√≠≈æe.
"""

# SEZNAM PRODEJ≈Æ => va≈°√≠m √∫kolem je zjistit, kter√Ω produkt se prod√°val nejv√≠ce
prodeje = [
    "ban√°n", "okurek", "okurek", "mouka", "papaya", "ban√°n", "okurek", "okurek", "mouka", "papaya",
    "okurek", "ban√°n", "Targa Florio", "mouka", "okurek", "ban√°n", "okurek", "okurek", "mouka", "okurek",
    "Coca-Cola", "okurek", "mouka", "Coca-Cola", "ban√°n", "ban√°n", "okurek", "Coca-Cola", "mouka", "meloun",
    "≈ô√≠zek", "Targa Florio", "papaya", "mouka", "okurek", "ban√°n", "okurek", "Coca-Cola", "mouka", "papaya",
    "ban√°n", "papaya", "Coca-Cola", "mouka", "okurek" "ban√°n", "okurek", "Coca-Cola", "okurek", "okurek",
]


############### N√ÅPOVƒöDA (m≈Ø≈æete smazat)
pocet = {} # Vytvo≈ôen√≠ pr√°zdn√©ho slovn√≠ku

# UK√ÅZKA PR√ÅCE SE SLOVN√çKEM:

if "ban√°n" not in pocet:
    # ban√°n je≈°tƒõ ve slovn√≠ku nen√≠, tak≈æe m√°m zat√≠m jeden
    pocet["ban√°n"] = 1
else:
    # ban√°n u≈æ ve slovn√≠ku je, tak≈æe jen zv√Ω≈°√≠me poƒç√≠tadlo o 1
    pocet["ban√°n"] += 1
################



"""
√öKOL: P≈ôezd√≠vka Generator
    - funkce, string
- - - - - - - - - - - - - - - - -

Udƒõlejte funkci, kter√° p≈ôij√≠m√° n√°sleduj√≠c√≠ parametry:
    - obl√≠ben√° kytka u≈æivatele (string)
    - ≈°≈•astn√© ƒç√≠slo (int)
    - voliteln√Ω parametr "X" (boolean, v√Ωchoz√≠ hodnota je True) (boolean)
    
Funkce vyrob√≠ a vr√°t√≠ p≈ôezd√≠vku slo≈æenou z parametr≈Ø. A to tak, ≈æe p≈ôezd√≠vka = ƒç√≠slo + kytka + ƒç√≠slo, a pokud je 
nav√≠c parametr X true, tak ji je≈°tƒõ obal√≠ v√Ωrazem "Xxx_" zep≈ôedu a v√Ωrazem "_xxX" zezadu.

Na p≈ô√≠klady se pod√≠vejte n√≠≈æe.

"""

def prezdivka(kytka, cislo, X = True):

    # TUTO ƒå√ÅST NAPROGRAMUJTE
    pass
    # return ?


# P≈ò√çKLADY (n√°sleduj√≠c√≠ ≈ô√°dky v√°m napov√≠, jak m√° v√Ωstup vypadat a z√°rove≈à program i otestuj√≠)
# pou≈æijte pouze pro otestov√°n√≠, nic nemƒõ≈àte (pokud va≈°e funkce vrac√≠ ≈°patn√© hodnoty, program spadne)

assert prezdivka("Rododendron", 101) == "Xxx_101Rododendron101_xxX"
assert prezdivka("Rododendron", 101, False) == "101Rododendron101"
assert prezdivka("Smrk", 12) == "Xxx_12Smrk12_xXX"
